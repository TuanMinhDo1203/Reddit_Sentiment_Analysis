import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import os
import random
import seaborn as sns
from wordcloud import WordCloud
import altair as alt
import base64
from io import BytesIO
from PIL import Image
import re
import numpy as np
import json
import ast
from pathlib import Path
from sentiment_charts import display_sentiment_charts

@st.cache_data
def load_match_data():
    path = Path("Reddit_Sentiment_Analysis/dataframe/source_dashboard/nonan_goodformat_match_data.csv")
    df_match = pd.read_csv(path)
    df_match["Date"] = pd.to_datetime(df_match["Date"])
    return df_match

@st.cache_data
def load_sentiment_data():
    df_sentiment = pd.read_csv(Path("Reddit_Sentiment_Analysis/dataframe/source_dashboard/nonan_goodformat_comment_data.csv"))
    df_sentiment["match_time"] = pd.to_datetime(df_sentiment["match_time"])
    return df_sentiment

@st.cache_data
def load_event_data():
    df_match = pd.read_csv(Path("Reddit_Sentiment_Analysis/dataframe/source_dashboard/full_events.csv"))
    df_match["Date"] = pd.to_datetime(df_match["Date"])
    return df_match

# ƒê·ªãnh nghƒ©a h√†m l·∫•y ƒë∆∞·ªùng d·∫´n logo
def get_team_logo(team_name, image_folder=Path("Reddit_Sentiment_Analysis/code/dashboard/logo")):
    """ L·∫•y ·∫£nh logo ƒë·∫ßu ti√™n t·ª´ th∆∞ m·ª•c ƒë·ªôi b√≥ng v√† chuy·ªÉn th√†nh Base64 """
    team_path = os.path.join(image_folder, team_name)
    if os.path.exists(team_path) and os.path.isdir(team_path):
        images = [img for img in os.listdir(team_path) if img.endswith((".png", ".jpg", ".jpeg", ".webp"))]
        if images:  # Ch·ªâ l·∫•y ·∫£nh ƒë·∫ßu ti√™n trong danh s√°ch
            img_path = os.path.join(team_path, images[0])
            with open(img_path, "rb") as img_file:
                return base64.b64encode(img_file.read()).decode("utf-8")
    return None  # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng c√≥ ·∫£nh

def decode_base64_to_image(base64_string):
    """Gi·∫£i m√£ chu·ªói Base64 th√†nh ·∫£nh PIL"""
    if base64_string:
        image_bytes = base64.b64decode(base64_string)
        return Image.open(BytesIO(image_bytes))
    return None

def display_match_info(match_info, events):
    if match_info.empty:
        st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho tr·∫≠n ƒë·∫•u n√†y!")
        return

    home_team = match_info['home_team'].values[0]
    away_team = match_info['away_team'].values[0]
    score = match_info['Score'].values[0]

    # L·∫•y logo ƒë·ªôi b√≥ng
    home_logo_base64 = get_team_logo(home_team)
    away_logo_base64 = get_team_logo(away_team)

    st.subheader(f"‚öΩ {home_team} vs {away_team}")

    # CSS
    st.markdown("""
        <style>
            .team-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }
            .team-logo {
                height: 100px;
                object-fit: contain;
                display: block;
            }
            .team-name {
                font-size: 16px;
                font-weight: bold;
                margin-top: 5px;
            }
            .score {
                font-size: 40px;
                font-weight: bold;
                text-align: center;
                margin-top: 30px;
                background: linear-gradient(to right, #FFD700, #FF8C00);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100%;
            }
        </style>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã logo v√† t·ª∑ s·ªë
    col1, col2, col3 = st.columns([2, 1, 2])
    with col1:
        st.markdown(
            f"""
            <div class="team-container">
                <img src="data:image/png;base64,{home_logo_base64}" class="team-logo"/>
                <div class="team-name">{home_team}</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    with col2:
        st.markdown(f"<div class='score'>{score}</div>", unsafe_allow_html=True)
    with col3:
        st.markdown(
            f"""
            <div class="team-container">
                <img src="data:image/png;base64,{away_logo_base64}" class="team-logo"/>
                <div class="team-name">{away_team}</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    # Ki·ªÉm tra n·∫øu events l√† chu·ªói JSON, chuy·ªÉn th√†nh danh s√°ch
    if isinstance(events, str):
        try:
            events = json.loads(events)
        except json.JSONDecodeError as e:
            st.error(f"‚ùå L·ªói khi parse events: {e}")
            st.text(f"üìå D·ªØ li·ªáu l·ªói: {events}")
            events = []

    if not isinstance(events, list):
        st.error(f"‚ùå Events kh√¥ng ph·∫£i danh s√°ch, gi√° tr·ªã th·ª±c: {type(events)}")
        events = []

    # L·ªçc ch·ªâ l·∫•y s·ª± ki·ªán b√†n th·∫Øng v√† th·∫ª ƒë·ªè
    filtered_events = [
        e for e in events if "Goal" in e.get("event_name", "") 
        or e.get("event_name") in ["Red Card", "Second Yellow Card"]
    ]

    # S·∫Øp x·∫øp theo th·ªùi gian (minute), x·ª≠ l√Ω n·∫øu kh√¥ng c√≥ gi√° tr·ªã h·ª£p l·ªá
    def parse_time(time_str):
        """Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ d·∫°ng '45+1' th√†nh s·ªë nguy√™n ƒë·ªÉ s·∫Øp x·∫øp."""
        match = re.match(r"(\d+)(?:\+(\d+))?", str(time_str))
        if match:
            base_time = int(match.group(1))  # Th·ªùi gian ch√≠nh
            extra_time = int(match.group(2)) if match.group(2) else 0  # Th·ªùi gian b√π gi·ªù
            return base_time + extra_time * 0.1  # ∆Øu ti√™n th·ªùi gian b√π gi·ªù nh·ªè h∆°n
        return float('inf')  # Tr√°nh l·ªói n·∫øu kh√¥ng parse ƒë∆∞·ª£c

    # S·∫Øp x·∫øp s·ª± ki·ªán theo th·ªùi gian
    filtered_events.sort(key=lambda x: parse_time(x.get("time", "9999")))

    # Hi·ªÉn th·ªã s·ª± ki·ªán ngay d∆∞·ªõi b·∫£ng t·ª∑ s·ªë
    if filtered_events:
        st.markdown("<br><br>", unsafe_allow_html=True)  # T·∫°o kho·∫£ng tr·ªëng m√† kh√¥ng c·∫ßn g·∫°ch ngang

        for event in filtered_events:
            if "Goal" in event["event_name"]:
                emoji = "‚öΩ"
            elif event["event_name"] == "Red Card":
                emoji = "üü•"
            elif event["event_name"] == "Second Yellow Card":
                emoji = "üü®üü•"
            else:
                emoji = "‚ùì"

            time = event.get("time", "N/A")
            player = event.get("player", "Unknown")

            team_side = "flex-start" if event.get("team") == "home" else "flex-end"

            st.markdown(
                f"""
                <div style="display: flex; justify-content: {team_side}; margin-top: 5px;">
                    <span style="font-weight: bold;">{time}' - {emoji} {event['event_name']}</span> | {player}
                </div>
                """,
                unsafe_allow_html=True
            )

    st.markdown("---")

    # Th√¥ng tin chi ti·∫øt
    info_html = f"""
        <style>
            .info-container {{
                display: flex;
                justify-content: center;
                gap: 50px;
                flex-wrap: wrap;
            }}
            .info-box {{
                background-color: #222;
                padding: 15px 30px;
                border-radius: 12px;
                text-align: center;
                color: white;
                font-size: 20px;
                min-width: 180px;
                font-weight: bold;
            }}
            .info-box p {{
                margin: 8px 0;
            }}
        </style>
        <div class="info-container">
            <div class="info-box">
                <p>üìÖ <b>Ng√†y</b></p>
                <p>{pd.Timestamp(match_info["Date"].values[0]).strftime("%d-%m-%Y")}</p>
            </div>
            <div class="info-box">
                <p>‚è∞ <b>Gi·ªù</b></p>
                <p>{match_info["Time"].values[0]}</p>
            </div>
            <div class="info-box">
                <p>üèüÔ∏è <b>S√¢n</b></p>
                <p>{match_info["Venue"].values[0]}</p>
            </div>
            <div class="info-box">
                <p>üë• <b>Kh√°n gi·∫£</b></p>
                <p>{match_info["Attendance"].values[0]}</p>
            </div>
            <div class="info-box">
                <p>‚öñÔ∏è <b>Tr·ªçng t√†i</b></p>
                <p>{match_info["referee"].values[0]}</p>
            </div>
        </div>
    """
    st.markdown(info_html, unsafe_allow_html=True)

    

    st.markdown("---")
    



    



def get_random_team_image(team_name, image_folder=Path("Reddit_Sentiment_Analysis/code/dashboard/Team")):
    """ Ch·ªçn m·ªôt ·∫£nh ng·∫´u nhi√™n t·ª´ th∆∞ m·ª•c ƒë·ªôi b√≥ng v√† chuy·ªÉn th√†nh Base64 """
    team_path = os.path.join(image_folder, team_name)
    if os.path.exists(team_path) and os.path.isdir(team_path):
        images = [img for img in os.listdir(team_path) if img.endswith((".png", ".jpg", ".jpeg", "webp"))]
        if images:
            img_path = os.path.join(team_path, random.choice(images))
            with open(img_path, "rb") as img_file:
                return base64.b64encode(img_file.read()).decode("utf-8")
    return None

def display_match_stats(match_info):
    """ Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ tr·∫≠n ƒë·∫•u v·ªõi thanh progress ƒë·∫πp """
    if match_info.empty:
        return

    home_team = match_info["home_team"].values[0]
    away_team = match_info["away_team"].values[0]
    
    stats_columns = ["Possession", "Shots_on_Target", "Touches", "Tackles", "Corners", "Yellow_Cards", "Fouls"]
    
    # L·∫•y ·∫£nh logo
    home_logo = get_random_team_image(home_team)
    away_logo = get_random_team_image(away_team)
    
    if not home_logo or not away_logo:
        st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c logo ƒë·ªôi b√≥ng!")
    
    # T·∫°o DataFrame
    df_stats = pd.DataFrame({
        "Statistic": stats_columns,
        home_team: [float(match_info[f"{stat}_Home"].values[0]) for stat in stats_columns],
        away_team: [float(match_info[f"{stat}_Away"].values[0]) for stat in stats_columns]
    })
    df_stats.loc[df_stats["Statistic"] == "Shots_on_Target", "Statistic"] = "Shots_on_Target (%)"
    # Chu·∫©n b·ªã HTML hi·ªÉn th·ªã
    html_code = f"""
        <style>
            .match-container {{
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 50px;
                margin-top: 20px;
            }}
            .team-logo img {{
                
                width : 400px;
                height: auto;
            }}
            .stats-container {{
                background: #1e1e1e;
                border-radius: 15px;
                padding: 20px;
                box-shadow: 0px 4px 15px rgba(255, 255, 255, 0.2);
                font-family: Arial, sans-serif;
                color: white;
                text-align: center;
                width: 450px;
            }}
            .stats-header {{
                display: flex;
                justify-content: space-between;
                font-size: 20px;
                font-weight: bold;
                padding-bottom: 10px;
                border-bottom: 2px solid #444;
            }}
            .stats-row {{
                justify-content: center;
                align-items: center;
                text-align: center;
                padding: 10px 0;
            }}
            .progress-bar-container {{
                display: flex;
                align-items: center;
                justify-content: space-between;
                width: 100%;
                gap: 10px;
            }}
            .progress-bar {{
                height: 8px;
                border-radius: 5px;
                background: #ddd;
                overflow: hidden;
                flex-grow: 1;
                position: relative;
            }}
            .bar-home {{
                background: #007bff;
                height: 100%;
                position: absolute;
                left: 0;
            }}
            .bar-away {{
                background: #dc3545;
                height: 100%;
                position: absolute;
                right: 0;
            }}
            .stat-label {{
                font-size: 14px;
                font-weight: bold;
            }}
        </style>

        <div class="match-container">
            <div class="team-logo">
                <img src="data:image/png;base64,{home_logo}" alt="{home_team}">
            </div>
            <div class="stats-container">
                <div class="stats-header">
                    <span>{home_team}</span>
                    <span>{away_team}</span>
                </div>
    """
    
    for _, row in df_stats.iterrows():
        stat = row["Statistic"]
        home_value = row[home_team]
        away_value = row[away_team]
        home_percent = (home_value / (home_value + away_value)) * 100 if home_value + away_value > 0 else 50
        away_percent = 100 - home_percent
        
        html_code += f"""
        <div class="stats-row">
            <div class="stat-label">{stat}</div>
            <div class="progress-bar-container">
                <span>{home_value}</span>
                <div class="progress-bar">
                    <div class="bar-home" style="width: {home_percent}%"></div>
                    <div class="bar-away" style="width: {away_percent}%"></div>
                </div>
                <span>{away_value}</span>
            </div>
        </div>
        """
    
    html_code += f"""
            </div>
            <div class="team-logo">
                <img src="data:image/png;base64,{away_logo}" alt="{away_team}">
            </div>
        </div>
    """
    
    # st.markdown(html_code, unsafe_allow_html=True)
    st.components.v1.html(html_code, height=600)




def display_match_sentiment():
    df_match = load_match_data()
    df_sentiment = load_sentiment_data()
    df_events = load_event_data()  # Load s·ª± ki·ªán tr·∫≠n ƒë·∫•u

    st.title("üìä Sentiment Tr·∫≠n ƒë·∫•u")

    # Ch·ªçn v√≤ng ƒë·∫•u
    matchday_list = df_match["matchday"].unique()
    selected_matchday = st.selectbox("Ch·ªçn v√≤ng ƒë·∫•u:", sorted(matchday_list))

    # L·ªçc danh s√°ch tr·∫≠n ƒë·∫•u theo v√≤ng ƒë√£ ch·ªçn
    matches_in_round = df_match[df_match["matchday"] == selected_matchday]
    match_options = matches_in_round["home_team"] + " vs " + matches_in_round["away_team"]
    
    # Ch·ªçn tr·∫≠n ƒë·∫•u
    selected_match = st.selectbox("Ch·ªçn tr·∫≠n ƒë·∫•u:", match_options)

    # L·∫•y th√¥ng tin tr·∫≠n ƒë·∫•u
    home_team, away_team = selected_match.split(" vs ")
    match_info = matches_in_round[(matches_in_round["home_team"] == home_team) & (matches_in_round["away_team"] == away_team)]
    match_comments = df_sentiment[(df_sentiment["home_team"] == home_team) & (df_sentiment["away_team"] == away_team)]
    

        # üîπ Chuy·ªÉn t·ª´ string JSON th√†nh list (n·∫øu ch∆∞a ·ªü d·∫°ng list)
    df_events["events"] = df_events["events"].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)

    # üîπ X·ª≠ l√Ω k√Ω t·ª± ƒë·∫∑c bi·ªát v√† kho·∫£ng tr·∫Øng
    df_events["events"] = df_events["events"].apply(lambda events: [
        {**e, "event_name": e["event_name"].replace("\xa0", " ").strip()} for e in events
    ])
    # üîπ L·ªçc s·ª± ki·ªán c·ªßa tr·∫≠n ƒë·∫•u t·ª´ df_events
    match_events = df_events[(df_events["home_team"] == home_team) & (df_events["away_team"] == away_team)]

    # üîπ Chuy·ªÉn v·ªÅ danh s√°ch dictionary (n·∫øu c·∫ßn)
    events = match_events["events"].tolist()
    events = [e for sublist in events for e in sublist] if events else []  # Flatten n·∫øu c·∫ßn
    # Hi·ªÉn th·ªã th√¥ng tin tr·∫≠n ƒë·∫•u k√®m s·ª± ki·ªán
    display_match_info(match_info, events)  # ‚úÖ Truy·ªÅn th√™m events
    display_match_stats(match_info)
    display_sentiment_charts(match_comments, selected_match)

    
    
    
        
    #     # ---------------------- Pie Chart & Stacked Bar Chart (H√†ng 1 - CƒÉn th·∫≥ng h√†ng) ----------------------
    # col1, col2 = st.columns([1, 2])  # Chia layout

    # with col1:
    #     st.subheader("T·ª∑ l·ªá Sentiment To√†n Tr·∫≠n")  # Ti√™u ƒë·ªÅ Pie Chart

    # with col2:
    #     st.subheader("Di·ªÖn Bi·∫øn Sentiment")  # Ti√™u ƒë·ªÅ Bar Chart

    # col1, col2 = st.columns([1, 2])  # Chia layout l·∫°i l·∫ßn n·ªØa ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì

    # with col1:  # Pie Chart
    #     sentiment_counts = match_comments["Sentiment"].value_counts().reset_index()
    #     sentiment_counts.columns = ["Sentiment", "Count"]

    #     pie_chart = px.pie(sentiment_counts, values="Count", names="Sentiment", 
    #                         color_discrete_sequence=['#28a745', '#6c757d', '#dc3545'],
    #                         hole=0.3, width=350, height=350)
    #     st.plotly_chart(pie_chart, use_container_width=True)

    # with col2:  # Stacked Bar Chart - Sentiment theo 5 ph√∫t
    #     if "minute_in_match" in match_comments.columns:
    #         # Chuy·ªÉn "minute_in_match" v·ªÅ s·ªë, x·ª≠ l√Ω NaN
    #         match_comments["minute_in_match"] = pd.to_numeric(match_comments["minute_in_match"], errors="coerce")

    #         if match_comments["minute_in_match"].notna().any():  # Ki·ªÉm tra n·∫øu c√≥ gi√° tr·ªã h·ª£p l·ªá
    #             max_minute = match_comments["minute_in_match"].max()
    #         else:
    #             max_minute = 90  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu to√†n b·ªô l√† NaN

    #         match_comments["minute_bin"] = pd.cut(match_comments["minute_in_match"], 
    #                                             bins=np.arange(0, max_minute + 5, 5), 
    #                                             right=False)

    #         sentiment_bar_data = match_comments.groupby(["minute_bin", "Sentiment"]).size().reset_index(name="Count")
    #         # sentiment_bar_data["minute_bin"] = sentiment_bar_data["minute_bin"].astype(str)  
    #         # Chuy·ªÉn interval th√†nh d·∫°ng chu·ªói c√≥ d·∫°ng "start-end"
    #         sentiment_bar_data["minute_bin"] = sentiment_bar_data["minute_bin"].apply(
    #             lambda x: f"{int(x.left)}-{int(x.right)}" if pd.notna(x) else "Unknown"
    #         )



    #         bar_chart = px.bar(sentiment_bar_data, 
    #                         x="minute_bin", 
    #                         y="Count", 
    #                         color="Sentiment",
    #                         color_discrete_map={"Positive": "#28a745", "Neutral": "#6c757d", "Negative": "#dc3545"},
    #                         barmode="stack", 
    #                         width=650, 
    #                         height=350,
    #                         labels={"minute_bin": "Th·ªùi gian t√≠nh t·ª´ khi tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu (ph√∫t)", 
    #                                 "Count": "S·ªë l∆∞·ª£ng comment"})  # Ch·ªânh ti√™u ƒë·ªÅ tr·ª•c X/Y

    #         st.plotly_chart(bar_chart, use_container_width=True)
    #     else:
    #         st.warning("D·ªØ li·ªáu kh√¥ng c√≥ th√¥ng tin th·ªùi gian.")


    # # ---------------------- Word Cloud ----------------------
    # st.subheader("Word Cloud B√¨nh Lu·∫≠n")

    # # Ki·ªÉm tra n·∫øu tr·∫≠n ƒë·∫•u thay ƒë·ªïi => X√≥a cache WordCloud
    # if "last_match" not in st.session_state or st.session_state.last_match != selected_match:
    #     st.session_state.pop("wordcloud_img", None)  # X√≥a n·∫øu t·ªìn t·∫°i
    #     st.session_state.last_match = selected_match  # C·∫≠p nh·∫≠t tr·∫≠n ƒë·∫•u m·ªõi

    # # Ch·ªâ t·∫°o l·∫°i WordCloud n·∫øu ch∆∞a c√≥ trong session_state
    # if "wordcloud_img" not in st.session_state:
    #     all_text = " ".join(match_comments["comment_text"].dropna())

    #     if all_text.strip():  # Ki·ªÉm tra n·∫øu c√≥ t·ª´ ƒë·ªÉ t·∫°o WordCloud
    #         wordcloud = WordCloud(width=1000, height=500, background_color='black',
    #                             colormap='coolwarm').generate(all_text)

    #         buf = BytesIO()
    #         wordcloud.to_image().save(buf, format="PNG")
    #         st.session_state.wordcloud_img = base64.b64encode(buf.getvalue()).decode()
    #     else:
    #         st.session_state.wordcloud_img = None  # Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã

    # # Hi·ªÉn th·ªã WordCloud n·∫øu c√≥ d·ªØ li·ªáu
    # if st.session_state.wordcloud_img:
    #     st.markdown(
    #         f"""
    #         <div style="display: flex; justify-content: center;">
    #             <img src="data:image/png;base64,{st.session_state.wordcloud_img}" width="900">
    #         </div>
    #         """,
    #         unsafe_allow_html=True
    #     )
    # else:
    #     st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√¨nh lu·∫≠n ƒë·ªÉ t·∫°o Word Cloud.")

    # # √î nh·∫≠p ƒë·ªÉ t√¨m t·ª´ trong comment
    # clicked_word = st.text_input("üîç Nh·∫≠p t·ª´ b·∫°n mu·ªën t√¨m:", "")

    # # L·ªçc v√† hi·ªÉn th·ªã comment ch·ª©a t·ª´ ƒë√≥
    # if clicked_word:
    #     filtered_comments = match_comments[
    #         match_comments["comment_text"].str.contains(rf"\b{re.escape(clicked_word)}\b", case=False, na=False)
    #     ][["comment_text"]]

    #     if not filtered_comments.empty:
    #         st.subheader(f"üìú B√¨nh lu·∫≠n ch·ª©a t·ª´ '{clicked_word}':")
    #         st.dataframe(filtered_comments, height=300)
    #     else:
    #         st.warning(f"Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n n√†o ch·ª©a t·ª´ '{clicked_word}'.")






